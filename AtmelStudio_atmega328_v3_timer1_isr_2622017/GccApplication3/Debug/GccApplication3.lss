
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080014c  0080014c  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e0  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f2  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000287  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 24 01 	call	0x248	; 0x248 <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <io_init>:
void op6_on()	{PORTB |= (1<<output6);}
void op6_off()	{PORTB &= ~(1<<output6);}


void op7_on()	{PORTB |= (1<<output7);}
void op7_off()	{PORTB &= ~(1<<output7);}	
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 6f       	ori	r24, 0xFC	; 252
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8f 63       	ori	r24, 0x3F	; 63
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	08 95       	ret

000000b4 <op2_on>:
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	08 95       	ret

000000b8 <op2_off>:
  b8:	5a 98       	cbi	0x0b, 2	; 11
  ba:	08 95       	ret

000000bc <op3_on>:
  bc:	5b 9a       	sbi	0x0b, 3	; 11
  be:	08 95       	ret

000000c0 <op3_off>:
  c0:	5b 98       	cbi	0x0b, 3	; 11
  c2:	08 95       	ret

000000c4 <op4_on>:
  c4:	5c 9a       	sbi	0x0b, 4	; 11
  c6:	08 95       	ret

000000c8 <op4_off>:
  c8:	5c 98       	cbi	0x0b, 4	; 11
  ca:	08 95       	ret

000000cc <init_serial0>:
void putchar0 (int ch);


void init_serial0 (void)
{
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);	// Set frame format to 8 data bits, no parity, 1 stop bit
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);	//enable transmission and reception
  e0:	e1 ec       	ldi	r30, 0xC1	; 193
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <USART0ReceiveByte>:
*/


uint8_t USART0ReceiveByte()
{
	while(!(UCSR0A&(1<<RXC0))){};		// Wait for byte to be received		
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <USART0ReceiveByte+0x4>
	return UDR0;						// Return received data
  f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  fa:	08 95       	ret

000000fc <putchar0>:




void putchar0 (int ch)
{
  fc:	9c 01       	movw	r18, r24
	if (ch == '\n')
  fe:	0a 97       	sbiw	r24, 0x0a	; 10
 100:	41 f4       	brne	.+16     	; 0x112 <putchar0+0x16>
	{
		while (!(UCSR0A & 0x20));//								// Wait TXD Buffer Empty
 102:	e0 ec       	ldi	r30, 0xC0	; 192
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	95 ff       	sbrs	r25, 5
 10a:	fd cf       	rjmp	.-6      	; 0x106 <putchar0+0xa>
		UDR0 = 0x0D;                          					// Write CR
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	while (!(UCSR0A & 0x20)); 									// Wait TXD Buffer Empty
 112:	e0 ec       	ldi	r30, 0xC0	; 192
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	95 ff       	sbrs	r25, 5
 11a:	fd cf       	rjmp	.-6      	; 0x116 <putchar0+0x1a>
	UDR0 = ch;						    						// Write Character
 11c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 120:	08 95       	ret

00000122 <print_uart0>:
}


void print_uart0(void)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	char *p;													// Pointer Buffer
	p = uart0_buf;												// UART Buffer
 126:	c0 e5       	ldi	r28, 0x50	; 80
 128:	d1 e0       	ldi	r29, 0x01	; 1
	do 															// Get char & Print Until null
	{
		putchar0(*p); 											// Write char to UART
 12a:	89 91       	ld	r24, Y+
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 7e 00 	call	0xfc	; 0xfc <putchar0>
		p++;													// Next char
	}
	while(*p != '\0');											// End of ASCII (null)
 132:	88 81       	ld	r24, Y
 134:	81 11       	cpse	r24, r1
 136:	f9 cf       	rjmp	.-14     	; 0x12a <print_uart0+0x8>
	return;
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <timer0_init>:



void timer0_init()
{
	OCR1A = 0x3D08;
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	9d e3       	ldi	r25, 0x3D	; 61
 142:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 146:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TCCR1B |= (1 << WGM12);
 14a:	e1 e8       	ldi	r30, 0x81	; 129
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
	// Mode 4, CTC on OCR1A

	TIMSK1 |= (1 << OCIE1A);
 154:	af e6       	ldi	r26, 0x6F	; 111
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	8c 91       	ld	r24, X
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	8c 93       	st	X, r24
	//Set interrupt on compare match

	TCCR1B |= (1 << CS12);//TCCR1B |= (1 << CS12) | (1 << CS10);// set prescaler to 1024 and start the timer
 15e:	80 81       	ld	r24, Z
 160:	84 60       	ori	r24, 0x04	; 4
 162:	80 83       	st	Z, r24


	sei();
 164:	78 94       	sei
 166:	08 95       	ret

00000168 <timer1>:

unsigned int gpio_timer_flag,gpio1_counter=10;
void timer1()
{
	//PORTB ^= (1 << 13);
	gpio1_counter=gpio1_counter-1;
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpio1_counter>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gpio1_counter+0x1>
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gpio1_counter+0x1>
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpio1_counter>
	if (gpio1_counter < 5)
 17a:	05 97       	sbiw	r24, 0x05	; 5
 17c:	10 f4       	brcc	.+4      	; 0x182 <timer1+0x1a>
	{
		op3_on();
 17e:	0e 94 5e 00 	call	0xbc	; 0xbc <op3_on>
	}
	if (gpio1_counter > 5)
 182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpio1_counter>
 186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gpio1_counter+0x1>
 18a:	06 97       	sbiw	r24, 0x06	; 6
 18c:	10 f0       	brcs	.+4      	; 0x192 <timer1+0x2a>
	{
		op3_off();
 18e:	0e 94 60 00 	call	0xc0	; 0xc0 <op3_off>
	}
	if (gpio1_counter ==0)
 192:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpio1_counter>
 196:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gpio1_counter+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	31 f4       	brne	.+12     	; 0x1aa <timer1+0x42>
	{
		gpio1_counter=10;
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gpio1_counter+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpio1_counter>
 1aa:	08 95       	ret

000001ac <timer2>:
}
unsigned int gpio2_timer_flag,gpio2_counter=5;
void timer2()
{
	//PORTB ^= (1 << 13);
	gpio2_counter=gpio2_counter-1;
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (gpio2_counter < 3)
 1be:	03 97       	sbiw	r24, 0x03	; 3
 1c0:	10 f4       	brcc	.+4      	; 0x1c6 <timer2+0x1a>
	{
		op4_on();
 1c2:	0e 94 62 00 	call	0xc4	; 0xc4 <op4_on>
	}
	if (gpio2_counter > 3)
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ce:	04 97       	sbiw	r24, 0x04	; 4
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <timer2+0x2a>
	{
		op4_off();
 1d2:	0e 94 64 00 	call	0xc8	; 0xc8 <op4_off>
	}
	if (gpio2_counter ==0)
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1de:	89 2b       	or	r24, r25
 1e0:	31 f4       	brne	.+12     	; 0x1ee <timer2+0x42>
	{
		gpio2_counter=5;
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1ee:	08 95       	ret

000001f0 <__vector_11>:
	}
}

ISR (TIMER1_COMPA_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	// action to be done every 1 sec
	if (gpio_timer_flag==1)
 212:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 216:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	21 f4       	brne	.+8      	; 0x226 <__vector_11+0x36>
	{
		timer1();
 21e:	0e 94 b4 00 	call	0x168	; 0x168 <timer1>
		timer2();
 222:	0e 94 d6 00 	call	0x1ac	; 0x1ac <timer2>
	}
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <main>:

int main(void)
{

	uint8_t u8TempData;
	io_init();			//GPIO INPUT
 248:	0e 94 53 00 	call	0xa6	; 0xa6 <io_init>
	init_serial0();		//UART0 init
 24c:	0e 94 66 00 	call	0xcc	; 0xcc <init_serial0>
	timer0_init();		//timer.c
 250:	0e 94 9f 00 	call	0x13e	; 0x13e <timer0_init>
	
	sprintf(uart0_buf,"23/2/2017 v2 USART0 and GPIO O/P\r\n");//
 254:	83 e2       	ldi	r24, 0x23	; 35
 256:	e4 e0       	ldi	r30, 0x04	; 4
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	a0 e5       	ldi	r26, 0x50	; 80
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x16>
	print_uart0();
 266:	0e 94 91 00 	call	0x122	; 0x122 <print_uart0>
	sprintf(uart0_buf,"send 1 to gpio2 ON, 0 to gpio OFF\r\n");
 26a:	84 e2       	ldi	r24, 0x24	; 36
 26c:	e7 e2       	ldi	r30, 0x27	; 39
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	a0 e5       	ldi	r26, 0x50	; 80
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	8a 95       	dec	r24
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x2c>
	print_uart0();
 27c:	0e 94 91 00 	call	0x122	; 0x122 <print_uart0>
	
	gpio_timer_flag=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 288:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	while(1)
	{
			 // Receive data

			gpio1_check();
			 u8TempData = USART0ReceiveByte();//read incoming char from usart0
 28c:	0e 94 76 00 	call	0xec	; 0xec <USART0ReceiveByte>
			 if (u8TempData=='0')
 290:	80 33       	cpi	r24, 0x30	; 48
 292:	19 f4       	brne	.+6      	; 0x29a <main+0x52>
			 {
				 op2_off();
 294:	0e 94 5c 00 	call	0xb8	; 0xb8 <op2_off>
 298:	f9 cf       	rjmp	.-14     	; 0x28c <main+0x44>
			 }
			 if (u8TempData=='1')
 29a:	81 33       	cpi	r24, 0x31	; 49
 29c:	b9 f7       	brne	.-18     	; 0x28c <main+0x44>
			 {
				 op2_on();
 29e:	0e 94 5a 00 	call	0xb4	; 0xb4 <op2_on>
 2a2:	f4 cf       	rjmp	.-24     	; 0x28c <main+0x44>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
