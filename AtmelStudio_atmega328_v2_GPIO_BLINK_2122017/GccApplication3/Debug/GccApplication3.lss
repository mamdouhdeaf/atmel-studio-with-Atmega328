
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029c  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fd  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <io_init>:

void op3_on()	{PORTD |= (1<<output3);}
void op3_off()	{PORTD &= ~(1<<output3);}

void op4_on()	{PORTD |= (1<<output4);}
void op4_off()	{PORTD &= ~(1<<output4);}
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 6f       	ori	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8f 63       	ori	r24, 0x3F	; 63
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	08 95       	ret

0000008e <op2_on>:
  8e:	5a 9a       	sbi	0x0b, 2	; 11
  90:	08 95       	ret

00000092 <op2_off>:
  92:	5a 98       	cbi	0x0b, 2	; 11
  94:	08 95       	ret

00000096 <op3_on>:
  96:	5b 9a       	sbi	0x0b, 3	; 11
  98:	08 95       	ret

0000009a <op3_off>:
  9a:	5b 98       	cbi	0x0b, 3	; 11
  9c:	08 95       	ret

0000009e <op13_on>:
	

void op13_on()	{PORTB |= (1<<output13);}
  9e:	2d 9a       	sbi	0x05, 5	; 5
  a0:	08 95       	ret

000000a2 <op13_off>:
  a2:	2d 98       	cbi	0x05, 5	; 5
  a4:	08 95       	ret

000000a6 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "INC/gpio_func.c"
int main(void)
{
	io_init();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <io_init>
	while(1)
	{
		op13_on();
  aa:	0e 94 4f 00 	call	0x9e	; 0x9e <op13_on>
		op2_off();
  ae:	0e 94 49 00 	call	0x92	; 0x92 <op2_off>
		op3_off();
  b2:	0e 94 4d 00 	call	0x9a	; 0x9a <op3_off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x20>
  c6:	00 00       	nop
		_delay_ms(1000);        //Delay for 1000ms => 1 sec
		
		op13_off();
  c8:	0e 94 51 00 	call	0xa2	; 0xa2 <op13_off>
		op2_on();
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <op2_on>
		op3_off();
  d0:	0e 94 4d 00 	call	0x9a	; 0x9a <op3_off>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	83 ed       	ldi	r24, 0xD3	; 211
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x3e>
  e4:	00 00       	nop
		_delay_ms(1000);        //Delay for 1000ms => 1 sec
		
		op13_off();
  e6:	0e 94 51 00 	call	0xa2	; 0xa2 <op13_off>
		op2_off();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <op2_off>
		op3_on();
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <op3_on>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x5c>
 102:	00 00       	nop
 104:	d2 cf       	rjmp	.-92     	; 0xaa <main+0x4>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
